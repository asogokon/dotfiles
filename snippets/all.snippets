# This file contains snippets that are always defined. I personally
# have snippets for signatures and often needed texts

##############
# NICE BOXES #
##############
global !p
import string, vim
def _parse_comments(s):
    i = iter(s.split(","))

    rv = []
    try:
        while True:
            n = i.next()
            if n[0] == 's':
                ctriple = []
                indent = ""
                if n[1] in string.digits:
                    indent = " " * int(n[1])
                ctriple.append(n.split(":",1)[1])
                n = i.next()
                assert(n[0] == 'm')
                ctriple.append(n.split(":",1)[1])
                n = i.next()
                assert(n[0] == 'e')
                ctriple.append(n.split(":",1)[1])
                ctriple.append(indent)
                rv.append(ctriple)
            elif n[0] == 'b':
                cm = n.split(":", 1)[1]
                if len(cm) == 1:
                    rv.insert(0, (cm,cm,cm, ""))
    except StopIteration:
       return rv

def make_box(twidth, bwidth = None):
   if bwidth is None:
      bwidth = twidth + 2
   b,m,e,i = _parse_comments(vim.eval("&comments"))[0]
   sline = b + m + bwidth*m + 2*m
   nspaces = (bwidth - twidth)//2 
   mlines = i + m + " " + " "*nspaces
   mlinee = " " + " "*(bwidth-twidth-nspaces) + m
   eline = i + 2*m + bwidth*m + m + e
   return sline, mlines, mlinee, eline
endglobal

snippet box "A nice box with the current comment symbol" b
`!p
box = make_box(len(t[1]))
snip.rv = box[0] + '\n' + box[1]
`${1:content}`!p
box = make_box(len(t[1]))
snip.rv = box[2] + '\n' + box[3]`
$0
endsnippet

snippet bbox "A nice box over the full width" b
`!p
box = make_box(len(t[1]), 71)
snip.rv = box[0] + '\n' + box[1]
`${1:content}`!p
box = make_box(len(t[1]), 71)
snip.rv = box[2] + '\n' + box[3]`
$0
endsnippet

##########################
# LOREM IPSUM GENERATORS #
##########################
snippet lorem "Lorem Ipsum - 50 Words" b
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
no sea takimata sanctus est Lorem ipsum dolor sit amet.
endsnippet

# vim:ft=snippets:
snippet inf "inf.ed.ac.uk"
uk.ac.ed.inf.
endsnippet

snippet me "signature"
s0805753 University of Edinburgh.
endsnippet

snippet lfcs "lfcs"
LABORATORY FOR FOUNDATIONS OF COMPUTER SCIENCE
endsnippet

# Licenses ###############################################

snippet /gpl "GPL"
/************************************************************************
 *  ${1:<one line to give the program's name and a brief idea of what it does.>} 
 *  Copyright (C) ${2:<year>}  ${3:<name of author>}
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>. 
 *  
 ************************************************************************/
endsnippet

snippet mes "message"
/*-------------------------[ ${1:message} ]-------------------------*/
endsnippet

snippet ll "label"
/*--------------------| ${1:message}                                 */
endsnippet

# Logical symbols

snippet \exists "Existential quantifier"
∃
endsnippet

snippet \forall "Universal quantifier"
∀
endsnippet

snippet \land "Logical AND"
∧
endsnippet

snippet \lor "Logical OR"
∨
endsnippet

snippet \lnot "Logical NOT"
¬
endsnippet

snippet \implies "Logical IMPLICATION"
→
endsnippet

snippet \iff "Logical BI-IMPLICATION"
↔
endsnippet

# Arithmetic

snippet \geq "Greater than or equal to "
≥
endsnippet

snippet \leq "Less than or equal to "
≤
endsnippet

snippet \neq "Not equal to "
≠
endsnippet


# Greek alphabet

snippet \alpha "alpha"
α
endsnippet

snippet \beta "beta"
β
endsnippet

snippet \gamma "gamma"
γ
endsnippet

snippet \delta "delta"
δ
endsnippet

snippet \epsilon "epsilon"
ε
endsnippet

snippet \zeta "zeta"
ζ
endsnippet

snippet \eta "eta"
η
endsnippet

snippet \theta "theta"
θ
endsnippet

snippet \iota "iota"
ι
endsnippet

snippet \kappa "kappa"
κ
endsnippet

snippet \lambda "lambda"
λ
endsnippet

snippet \mu "mu"
μ
endsnippet

snippet \nu "nu"
ν
endsnippet

snippet \xi "xi"
ξ
endsnippet

snippet \omicron "omicron"
ο
endsnippet

snippet \pi "pi" 
π
endsnippet

snippet \rho "rho"
ρ
endsnippet

snippet \sigma "sigma"
σ
endsnippet

snippet \tau "tau"
τ
endsnippet

snippet \upsilon "upsilon"
υ
endsnippet

snippet \phi "phi"
ϕ
endsnippet

snippet \chi "chi"
χ
endsnippet

snippet \psi "psi"
ψ
endsnippet

snippet \omega "omega"
ω
endsnippet

# Capital Greek alphabet


snippet \Alpha    "Alpha"
Α
endsnippet

snippet \Beta     "Beta"
Β
endsnippet

snippet \Gamma    "Gamma"
Γ
endsnippet

snippet \Delta    "Delta"
Δ
endsnippet

snippet \Epsilon  "Epsilon"
Ε
endsnippet

snippet \Zeta     "Zeta"
Ζ
endsnippet

snippet \Eta      "Eta"
Η
endsnippet

snippet \Theta    "Theta"
Θ
endsnippet

snippet \Iota     "Iota"
Ι
endsnippet

snippet \Kappa    "Kappa"
Κ
endsnippet

snippet \Lambda   "Lambda"
Λ
endsnippet

snippet \Mu       "Mu"
Μ
endsnippet

snippet \Nu       "Nu"
Ν
endsnippet

snippet \Xi       "Xi"
Ξ
endsnippet

snippet \Omicron  "Omicron"
Ο
endsnippet

snippet \Pi       "Pi" 
Π
endsnippet

snippet \Rho      "Rho"
Ρ
endsnippet

snippet \Sigma    "Sigma"
Σ
endsnippet

snippet \Tau      "Tau"
Τ
endsnippet

snippet \Upsilon  "Upsilon"
Υ
endsnippet

snippet \Phi      "Phi"
Φ
endsnippet

snippet \Chi      "Chi"
Χ
endsnippet

snippet \Psi      "Psi"
Ψ
endsnippet

snippet \Omega    "Omega"
Ω
endsnippet
